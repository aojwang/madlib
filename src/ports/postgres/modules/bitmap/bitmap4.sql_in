/* ----------------------------------------------------------------------- *//**
 *
 * @file bitmap.sql_in
 *
 * @brief The \ref
 *
 * @sa 
 *
 *//* ----------------------------------------------------------------------- */

m4_include(`SQLCommon.m4')

CREATE TYPE MADLIB_SCHEMA.bitmap4;

/*
 * @brief the in function for the bitmap data type
 *
 * @param args[0]   the input string, which should be split by a comma.
 *
 * @return the bitmap representing the input string
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_in(cstring)
RETURNS MADLIB_SCHEMA.bitmap4
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;


/*
 * @brief the out function for the bitmap data type.
 *
 * @param args[0]   the bitmap
 *
 * @return the string representing the bitmap.
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_out(MADLIB_SCHEMA.bitmap4)
RETURNS cstring
AS 'MODULE_PATHNAME'
LANGUAGE C IMMUTABLE STRICT;


CREATE TYPE MADLIB_SCHEMA.bitmap4 (
   internallength = VARIABLE, 
   input = MADLIB_SCHEMA.bitmap4_in,
   output = MADLIB_SCHEMA.bitmap4_out,
   storage = EXTENDED,
   alignment = int4
);

/*
 * @brief the step function for aggregating the input numbers to
 * a compressed bitmap.
 *
 * @param args[0]   an array indicating the state
 * @param args[1]   the input number
 * @param args[2]   the number of empty elements will be dynamically
 *                  added to the state array
 *
 * @return an array indicating the state after inserted the input number.
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_agg_sfunc
(
    MADLIB_SCHEMA.bitmap4,
    INT8,
    INT4
)
RETURNS MADLIB_SCHEMA.bitmap4
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE;


/*
 * @brief the pre-function for the bitmap aggregation.
 *
 * @param args[0]   an array of the first state
 * @param args[1]   an array of the second state
 *
 * @return an array of merging the first state and the second state.
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_agg_pfunc
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS MADLIB_SCHEMA.bitmap4
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE;


CREATE AGGREGATE MADLIB_SCHEMA.bitmap4_agg
(
    INT8,
    INT4
)
(
    SFUNC=MADLIB_SCHEMA.bitmap4_agg_sfunc,
    STYPE=MADLIB_SCHEMA.bitmap4
    m4_ifdef(`__GREENPLUM__',`,prefunc=MADLIB_SCHEMA.bitmap4_agg_pfunc')
);


/*
 * @brief The implementation of AND operation.
 *
 * @param args[0]   the first bitmap array
 * @param args[1]   the second bitmap array
 *
 * @return the result of args[0] AND args[1].
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_and
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS MADLIB_SCHEMA.bitmap4
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/*
 * @brief The implementation of OR operation.
 *
 * @param args[0]   the first bitmap array
 * @param args[1]   the second bitmap array
 *
 * @return the result of args[0] OR args[1].
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_or
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS MADLIB_SCHEMA.bitmap4
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/*
 * @brief get the positions of the non-zero bits
 *
 * @param args[0]   the bitmap array
 *
 * @return the array contains the positions of the non-zero bits.
 * @note the position starts from 1.
 *
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_nonzero_positions
(
    MADLIB_SCHEMA.bitmap4
)
RETURNS INT8[]
AS 'MODULE_PATHNAME'
LANGUAGE C 
IMMUTABLE STRICT;


/*
 * @brief get the number of bits whose value is 1.
 *
 * @param args[0]   the bitmap array
 *
 * @return the count of non-zero bits in the bitmap.
 *
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_nonzero_count
(
    MADLIB_SCHEMA.bitmap4
)
RETURNS INT8
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE STRICT;


/*
 * @brief get the array representation for the bitmap
 *
 * @param args[0]   the bitmap
 *
 * @return the array representation for the bitmap.
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_return_array
(
    MADLIB_SCHEMA.bitmap4
)
RETURNS INT4[]
AS 'MODULE_PATHNAME'
LANGUAGE C 
IMMUTABLE STRICT;


/*
 * @brief get the varbit representation for the bitmap
 *
 * @param args[0]   the bitmap
 *
 * @return the varbit representation for the bitmap.
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_return_varbit
(
    MADLIB_SCHEMA.bitmap4
)
RETURNS VARBIT
AS 'MODULE_PATHNAME'
LANGUAGE C 
IMMUTABLE STRICT;


/*
 * @brief get the bitmap representation for the array
 *
 * @param args[0]   the input array
 *
 * @return the bitmap representation for the array.
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.array_return_bitmap4
(
    INT8[]
)
RETURNS MADLIB_SCHEMA.bitmap4
AS 'MODULE_PATHNAME'
LANGUAGE C 
IMMUTABLE STRICT;


/*
 * @brief The implementation of = operation.
 *
 * @param args[0]   the first bitmap array
 * @param args[1]   the second bitmap array
 *
 * @return the result of args[0] = args[1].
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_eq
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS BOOL
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE;


/*
 * @brief The implementation of <> operation.
 *
 * @param args[0]   the first bitmap array
 * @param args[1]   the second bitmap array
 *
 * @return the result of args[0] <> args[1].
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_neq
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS BOOL
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE;


/*
 * @brief The implementation of > operation.
 *
 * @param args[0]   the first bitmap array
 * @param args[1]   the second bitmap array
 *
 * @return the result of args[0] > args[1].
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_gt
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS BOOL
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE;


/*
 * @brief The implementation of < operation.
 *
 * @param args[0]   the first bitmap array
 * @param args[1]   the second bitmap array
 *
 * @return the result of args[0] < args[1].
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_lt
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS BOOL
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE;


/*
 * @brief The implementation of >= operation.
 *
 * @param args[0]   the first bitmap array
 * @param args[1]   the second bitmap array
 *
 * @return the result of args[0] >= args[1].
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_ge
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS BOOL
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE;


/*
 * @brief The implementation of <= operation.
 *
 * @param args[0]   the first bitmap array
 * @param args[1]   the second bitmap array
 *
 * @return the result of args[0] <= args[1].
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_le
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS BOOL
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE;


/*
 * @brief compare two bitmaps
 *
 * @param args[0]   the first bitmap array
 * @param args[1]   the second bitmap array
 *
 * @return 0 for equality; 1 for greater than; and -1 for less than.
 */
CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.bitmap4_cmp
(
    MADLIB_SCHEMA.bitmap4,
    MADLIB_SCHEMA.bitmap4
)
RETURNS INT
AS 'MODULE_PATHNAME'
LANGUAGE C
IMMUTABLE;


CREATE OPERATOR MADLIB_SCHEMA.= (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4,
    procedure = MADLIB_SCHEMA.bitmap4_eq,
    commutator = operator(MADLIB_SCHEMA.=) ,
    negator = operator(MADLIB_SCHEMA.<>) ,
    restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR MADLIB_SCHEMA.== (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4,
    procedure = MADLIB_SCHEMA.bitmap4_eq,
    commutator = operator(MADLIB_SCHEMA.=) ,
    negator = operator(MADLIB_SCHEMA.<>) ,
    restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR MADLIB_SCHEMA.<> (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4,
    procedure = MADLIB_SCHEMA.bitmap4_neq,
    commutator = operator(MADLIB_SCHEMA.<>) ,
    negator = operator(MADLIB_SCHEMA.=) ,
    restrict = eqsel, join = eqjoinsel
);

CREATE OPERATOR MADLIB_SCHEMA.> (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4,
    procedure = MADLIB_SCHEMA.bitmap4_gt,
    commutator = operator(MADLIB_SCHEMA.<) ,
    negator = operator(MADLIB_SCHEMA.<=) ,
    restrict = scalargtsel, join = scalargtjoinsel
);


CREATE OPERATOR MADLIB_SCHEMA.>= (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4,
    procedure = MADLIB_SCHEMA.bitmap4_ge,
    commutator = operator(MADLIB_SCHEMA.<=) ,
    negator = operator(MADLIB_SCHEMA.<) ,
    restrict = scalargtsel, join = scalargtjoinsel
);

CREATE OPERATOR MADLIB_SCHEMA.< (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4,
    procedure = MADLIB_SCHEMA.bitmap4_lt,
    commutator = operator(MADLIB_SCHEMA.>) ,
    negator = operator(MADLIB_SCHEMA.>=) ,
    restrict = scalarltsel, join = scalarltjoinsel
);

CREATE OPERATOR MADLIB_SCHEMA.<= (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4,
    procedure = MADLIB_SCHEMA.bitmap4_le,
    commutator = operator(MADLIB_SCHEMA.>=) ,
    negator = operator(MADLIB_SCHEMA.>) ,
    restrict = scalarltsel, join = scalarltjoinsel
);


/*
 * define the btree index, so that we can use the type
 * in GROUP BY clause
 */
CREATE OPERATOR CLASS MADLIB_SCHEMA.bitmap4_index_btree
DEFAULT FOR TYPE MADLIB_SCHEMA.bitmap4 USING btree AS
OPERATOR        1       MADLIB_SCHEMA.< ,
OPERATOR        2       MADLIB_SCHEMA.<= ,
OPERATOR        3       MADLIB_SCHEMA.=,
OPERATOR        4       MADLIB_SCHEMA.>= ,
OPERATOR        5       MADLIB_SCHEMA.>,
FUNCTION        1       MADLIB_SCHEMA.bitmap4_cmp(MADLIB_SCHEMA.bitmap4, MADLIB_SCHEMA.bitmap4);



CREATE OPERATOR | (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4, 
    procedure = MADLIB_SCHEMA.bitmap4_or
);

CREATE OPERATOR MADLIB_SCHEMA.| (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4, 
    procedure = MADLIB_SCHEMA.bitmap4_or
);

CREATE OPERATOR & (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4, 
    procedure = MADLIB_SCHEMA.bitmap4_and
);

CREATE OPERATOR MADLIB_SCHEMA.& (
    leftarg = MADLIB_SCHEMA.bitmap4, rightarg = MADLIB_SCHEMA.bitmap4, 
    procedure = MADLIB_SCHEMA.bitmap4_and
);


/*
 * CASTs
 */
CREATE CAST (MADLIB_SCHEMA.bitmap4 AS INT4[]) 
WITH FUNCTION MADLIB_SCHEMA.bitmap4_return_array(MADLIB_SCHEMA.bitmap4);

CREATE CAST (INT8[] AS MADLIB_SCHEMA.bitmap4) 
WITH FUNCTION MADLIB_SCHEMA.array_return_bitmap4(INT8[]);

CREATE CAST (MADLIB_SCHEMA.bitmap4 AS VARBIT) 
WITH FUNCTION MADLIB_SCHEMA.bitmap4_return_varbit(MADLIB_SCHEMA.bitmap4);