CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cal_category_sim
    (
	FLOAT8[],
	FLOAT8[]
    )
RETURNS FLOAT8 AS
'MODULE_PATHNAME', 'get_category_sim'
LANGUAGE C IMMUTABLE;


CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cal_tendency
    (
	oid_column		TEXT,
	did_column		TEXT,
	sim_table		TEXT,	
	sim_columns		TEXT[],
	sim_weight		FLOAT8[],
	final_sim_table TEXT
	)
RETURNS void AS $$
DECLARE
    stmt			TEXT;
	sel_stmt		TEXT;
	from_stmt		TEXT;
BEGIN
	sel_stmt = MADLIB_SCHEMA.__format('SELECT % as uid, % as ruid,', ARRAY[oid_column, did_column]);

	FOR i IN 1..array_upper(sim_columns, 1) LOOP
		sel_stmt = MADLIB_SCHEMA.__format
				('% coalesce(%_sim, 0.0) * % +', ARRAY[sel_stmt, sim_columns[i], sim_weight[i]::TEXT]);
	END LOOP;

	from_stmt = ' FROM '|| sim_table || ' ';
	sel_stmt = rtrim(sel_stmt, '+') || 'AS tendency ';

	RAISE INFO 'sel stmt:%', sel_stmt;
	RAISE INFO 'from stmt:%', from_stmt;

	EXECUTE 'DROP TABLE IF EXISTS ' || final_sim_table;
	stmt = MADLIB_SCHEMA.__format
			(
				'CREATE TABLE % AS
				  %
				  %
				 DISTRIBUTED BY(uid, ruid)',
				ARRAY[
					final_sim_table,
					sel_stmt,
					from_stmt
				]
			);
	
	RAISE INFO 'tendency:%', stmt;

	EXECUTE stmt;
END
$$ LANGUAGE PLPGSQL;



CREATE OR REPLACE FUNCTION MADLIB_SCHEMA.cal_user_itemset 
    (
	rate_table			TEXT,
	rate_uid_column		TEXT,
	rate_iid_column		TEXT,
	rate_column			TEXT,
	sim_table			TEXT,
	sim_uid_column		TEXT,
	sim_ruid_column		TEXT,
	sim_column			TEXT,
	user_itemset_table	TEXT
	)
RETURNS TEXT AS $$
DECLARE
    stmt				TEXT;
	num_ids				INT;
	itemset_tmp_table	TEXT := 'itemset_temp_table';
	itemset_tmp_table2	TEXT := 'itemset_temp_table2';

BEGIN
	EXECUTE 'DROP TABLE IF EXISTS ' || user_itemset_table;
	EXECUTE 'DROP TABLE IF EXISTS ' || itemset_tmp_table;
	EXECUTE 'DROP TABLE IF EXISTS ' || itemset_tmp_table2;

	EXECUTE 'SELECT count(feat_no) FROM test.item_no' INTO num_ids;	

	stmt = MADLIB_SCHEMA.__format
		(
			'CREATE TEMP TABLE %(uid, result) AS
			 SELECT
				% as uid, 
			 	MADLIB_SCHEMA.svec_cast_positions_float8arr
					(
						array_agg(feat_no),
						array_agg(%),
						%,
						0.0
					) as result
			 FROM 
				% t1, test.item_no t2
			 WHERE t1.% = t2.feature
			 GROUP BY uid
			 DISTRIBUTED BY(uid)',
			ARRAY[
				itemset_tmp_table,
				rate_uid_column,
				rate_column,
				num_ids::TEXT,
				rate_table,
				rate_iid_column
			]
		);

	RAISE INFO 'svec the training set: %', stmt;
	EXECUTE stmt;

	stmt = MADLIB_SCHEMA.__format
		(
			'CREATE TEMP TABLE %(uid, weight) AS
			 SELECT n1.% as uid, 
					MADLIB_SCHEMA.svec_sum
						(MADLIB_SCHEMA.svec_mult_float8arr(n2.result, ARRAY[n1.%]::FLOAT8[])) as weight
			 FROM % n1, % n2 
			 WHERE n1.% = n2.uid
			 GROUP BY n1.% 
			 DISTRIBUTED BY (uid)',
			ARRAY[
				itemset_tmp_table2,
				sim_uid_column,
				sim_column,
				sim_table,
				itemset_tmp_table,
				sim_ruid_column,
				sim_uid_column
			]
		);
	RAISE INFO '%', stmt;
	EXECUTE stmt;

	stmt = MADLIB_SCHEMA.__format
			(
				'CREATE TABLE %(uid, weight) AS
				 SELECT 
					t2.uid,
					MADLIB_SCHEMA.svec_plus
					(
					coalesce(t1.result, ''{%}:{0.0}''::MADLIB_SCHEMA.svec),
					coalesce(t2.weight, ''{%}:{0.0}''::MADLIB_SCHEMA.svec)
					)as weight
				 FROM 
					% t1 RIGHT JOIN
					% t2
				 ON t1.uid = t2.uid
				 DISTRIBUTED BY(uid)',
				ARRAY[
					user_itemset_table,
					num_ids::TEXT,
					num_ids::TEXT,
					itemset_tmp_table,
					itemset_tmp_table2
				]
				 
			);
	RAISE INFO 'user item set:%', stmt;
	EXECUTE stmt;

	stmt = MADLIB_SCHEMA.__format
			(
				'INSERT INTO %
				 SELECT 
					*
				 FROM 
					% 
				 WHERE uid IN
					(SELECT uid FROM % EXCEPT 
					 SELECT uid FROM % )',
				ARRAY[
					user_itemset_table,
					itemset_tmp_table,
					itemset_tmp_table,
					user_itemset_table
				]
			);
	RAISE INFO 'user item set:%', stmt;
	EXECUTE stmt;

	EXECUTE 'DROP TABLE IF EXISTS ' || itemset_tmp_table;
	EXECUTE 'DROP TABLE IF EXISTS ' || itemset_tmp_table2;
	
	return user_itemset_table;
END
$$ LANGUAGE PLPGSQL;



